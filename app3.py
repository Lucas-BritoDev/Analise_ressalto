import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import math
from scipy import stats
import io

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="An√°lise de Ressalto Hidr√°ulico",
    page_icon="üåä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes de carregamento e limpeza de dados
def carregar_dados(arquivo):
    """
    Carrega os dados do arquivo CSV com delimitador ';'
    """
    try:
        df = pd.read_csv(arquivo, delimiter=';')
        return df
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {e}")
        return None

def limpar_dados(df):
    """
    Realiza a limpeza dos dados:
    - Remove espa√ßos em branco dos nomes das colunas
    - Converte colunas num√©ricas para o tipo correto
    - Trata valores ausentes
    """
    if df is None:
        return None
    
    # Renomeando colunas para remover espa√ßos e caracteres especiais
    df.columns = [col.strip().replace('[', '').replace(']', '') for col in df.columns]
    
    # Converte colunas num√©ricas para float
    colunas_numericas = ['tempo s', 'Z m', 'w m/s']
    for col in colunas_numericas:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Tratamento de valores nulos
    if df.isnull().sum().sum() > 0:
        st.warning(f"Foram encontrados {df.isnull().sum().sum()} valores nulos no conjunto de dados.")
        df = df.dropna()
        st.info(f"Depois da limpeza, o conjunto de dados tem {df.shape[0]} registros.")
    
    return df

# Fun√ß√µes de An√°lise Explorat√≥ria de Dados
def resumo_estatistico(df):
    """
    Calcula as estat√≠sticas descritivas do conjunto de dados
    """
    if df is None or df.empty:
        return None
    
    # Selecionando apenas colunas num√©ricas
    df_num = df.select_dtypes(include=[np.number])
    
    # Estat√≠sticas b√°sicas
    estatisticas = df_num.describe().T
    
    # Calculando assimetria e curtose
    estatisticas['assimetria'] = df_num.skew()
    estatisticas['curtose'] = df_num.kurtosis()
    
    return estatisticas

def detectar_outliers(df, coluna, metodo='iqr'):
    """
    Detecta outliers na coluna especificada usando o m√©todo IQR ou Z-Score
    """
    if df is None or df.empty or coluna not in df.columns:
        return df, []
    
    serie = df[coluna].dropna()
    
    if metodo == 'iqr':
        Q1 = serie.quantile(0.25)
        Q3 = serie.quantile(0.75)
        IQR = Q3 - Q1
        limite_inferior = Q1 - 1.5 * IQR
        limite_superior = Q3 + 1.5 * IQR
        outliers = df[(df[coluna] < limite_inferior) | (df[coluna] > limite_superior)]
    else:  # z-score
        z_scores = np.abs(stats.zscore(serie))
        outliers = df[z_scores > 3]
    
    return outliers, len(outliers)

def calcular_correlacoes(df):
    """
    Calcula a matriz de correla√ß√£o para as vari√°veis num√©ricas
    """
    if df is None or df.empty:
        return None
    
    # Seleciona apenas colunas num√©ricas
    df_num = df.select_dtypes(include=[np.number])
    
    # Calcula a matriz de correla√ß√£o
    corr = df_num.corr()
    
    return corr

# Fun√ß√µes de Visualiza√ß√£o
def criar_histograma(df, coluna, bins=20):
    """
    Cria um histograma para a coluna especificada
    """
    if df is None or df.empty or coluna not in df.columns:
        return None
    
    fig = px.histogram(
        df, x=coluna, 
        nbins=bins,
        title=f'Distribui√ß√£o de {coluna}',
        labels={coluna: coluna},
        color_discrete_sequence=['#3366CC']
    )
    
    # Adiciona linha para m√©dia
    media = df[coluna].mean()
    fig.add_vline(x=media, line_dash="dash", line_color="red", annotation_text=f"M√©dia: {media:.3f}")
    
    # Adiciona linha para mediana
    mediana = df[coluna].median()
    fig.add_vline(x=mediana, line_dash="dash", line_color="green", annotation_text=f"Mediana: {mediana:.3f}")
    
    fig.update_layout(
        xaxis_title=coluna,
        yaxis_title='Frequ√™ncia',
        bargap=0.1
    )
    
    return fig

def criar_boxplot(df, coluna):
    """
    Cria um boxplot para a coluna especificada
    """
    if df is None or df.empty or coluna not in df.columns:
        return None
    
    fig = px.box(
        df, y=coluna,
        title=f'Boxplot de {coluna}',
        labels={coluna: coluna},
        color_discrete_sequence=['#3366CC']
    )
    
    fig.update_layout(
        yaxis_title=coluna
    )
    
    return fig

def criar_scatter(df, coluna_x, coluna_y):
    """
    Cria um gr√°fico de dispers√£o (scatter plot) entre duas vari√°veis
    """
    if df is None or df.empty or coluna_x not in df.columns or coluna_y not in df.columns:
        return None
    
    fig = px.scatter(
        df, x=coluna_x, y=coluna_y,
        title=f'Rela√ß√£o entre {coluna_x} e {coluna_y}',
        labels={coluna_x: coluna_x, coluna_y: coluna_y},
        color_discrete_sequence=['#3366CC']
    )
    
    # Calculando a linha de tend√™ncia
    try:
        x = df[coluna_x]
        y = df[coluna_y]
        mask = ~np.isnan(x) & ~np.isnan(y)
        if np.sum(mask) > 1:  # Precisa de pelo menos 2 pontos para calcular a regress√£o
            slope, intercept, r_value, p_value, std_err = stats.linregress(x[mask], y[mask])
            y_pred = intercept + slope * x
            fig.add_traces(
                go.Scatter(
                    x=x, y=y_pred,
                    mode='lines',
                    name=f'Linha de tend√™ncia (R¬≤={r_value**2:.3f})',
                    line=dict(color='red', dash='dash')
                )
            )
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel calcular a linha de tend√™ncia: {e}")
    
    fig.update_layout(
        xaxis_title=coluna_x,
        yaxis_title=coluna_y
    )
    
    return fig

def criar_heatmap_correlacao(df):
    """
    Cria um mapa de calor (heatmap) da matriz de correla√ß√£o
    """
    if df is None or df.empty:
        return None
    
    corr = calcular_correlacoes(df)
    
    fig = go.Figure(data=go.Heatmap(
        z=corr.values,
        x=corr.columns,
        y=corr.index,
        colorscale='RdBu_r',
        zmid=0,
        colorbar=dict(title='Correla√ß√£o'),
        text=np.round(corr.values, 2),
        texttemplate='%{text:.2f}'
    ))
    
    fig.update_layout(
        title='Matriz de Correla√ß√£o',
        height=500,
        width=500
    )
    
    return fig

def criar_grafico_linha_tempo(df, coluna_y):
    """
    Cria um gr√°fico de linha para a evolu√ß√£o da vari√°vel ao longo do tempo
    """
    if df is None or df.empty or 'tempo s' not in df.columns or coluna_y not in df.columns:
        return None
    
    fig = px.line(
        df, x='tempo s', y=coluna_y,
        title=f'Evolu√ß√£o de {coluna_y} ao longo do tempo',
        labels={'tempo s': 'Tempo (s)', coluna_y: coluna_y},
        line_shape='linear'
    )
    
    fig.update_layout(
        xaxis_title='Tempo (s)',
        yaxis_title=coluna_y
    )
    
    return fig

def analise_estatistica_robusta(df, coluna):
    """
    Realiza an√°lise estat√≠stica robusta para a coluna especificada
    """
    if df is None or df.empty or coluna not in df.columns:
        return {}
    
    dados = df[coluna].dropna()
    
    # Testes de normalidade
    # Shapiro-Wilk teste (para amostras pequenas)
    if len(dados) < 5000:
        shapiro_test = stats.shapiro(dados)
        shapiro_p_valor = shapiro_test.pvalue
    else:
        shapiro_p_valor = None
    
    # Teste Kolmogorov-Smirnov (para amostras maiores)
    ks_test = stats.kstest(dados, 'norm', args=(dados.mean(), dados.std()))
    ks_p_valor = ks_test.pvalue
    
    # Estat√≠sticas descritivas
    descritivas = {
        'm√©dia': dados.mean(),
        'mediana': dados.median(),
        'desvio_padr√£o': dados.std(),
        'min': dados.min(),
        'max': dados.max(),
        'assimetria': stats.skew(dados),
        'curtose': stats.kurtosis(dados),
        'shapiro_p_valor': shapiro_p_valor,
        'ks_p_valor': ks_p_valor,
        '√©_normal': (shapiro_p_valor > 0.05 if shapiro_p_valor is not None else None) or ks_p_valor > 0.05
    }
    
    return descritivas

# Interface Streamlit
def main():
    st.title("üìä An√°lise de Dados de Ressalto Hidr√°ulico")
    
    st.markdown("""
    Esta aplica√ß√£o realiza uma an√°lise explorat√≥ria completa de dados de ressalto hidr√°ulico.
    Os dados incluem medi√ß√µes de tempo, posi√ß√£o (Z) e velocidade (w).
    """)
    
    # Sidebar para controles
    st.sidebar.header("Controles")
    
    arquivo = "dados_unidos.csv"
    
    # Carregar dados
    if os.path.exists(arquivo):
        df = carregar_dados(arquivo)
        if df is not None:
            df = limpar_dados(df)
            st.sidebar.success(f"Dados carregados com sucesso: {df.shape[0]} registros e {df.shape[1]} colunas")
            
            # Exibir as primeiras linhas dos dados
            st.subheader("Visualiza√ß√£o dos Dados")
            
            with st.expander("Ver primeiras linhas dos dados", expanded=True):
                st.dataframe(df.head(10))
                
                # Download dos dados limpos
                csv = df.to_csv(index=False)
                st.download_button(
                    label="Download dos dados limpos (CSV)",
                    data=csv,
                    file_name="dados_ressalto_limpos.csv",
                    mime="text/csv"
                )
            
            # Resumo estat√≠stico
            st.subheader("1. Resumo Estat√≠stico")
            
            with st.expander("Ver resumo estat√≠stico", expanded=True):
                resumo = resumo_estatistico(df)
                if resumo is not None:
                    st.dataframe(resumo)
                    
                    # Download do resumo estat√≠stico
                    csv_resumo = resumo.reset_index().to_csv(index=False)
                    st.download_button(
                        label="Download do resumo estat√≠stico (CSV)",
                        data=csv_resumo,
                        file_name="resumo_estatistico.csv",
                        mime="text/csv"
                    )
            
            # An√°lise de cada vari√°vel
            st.subheader("2. An√°lise por Vari√°vel")
            
            # Sele√ß√£o das vari√°veis num√©ricas para an√°lise
            variaveis_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
            
            variavel_selecionada = st.selectbox(
                "Selecione uma vari√°vel para an√°lise detalhada:",
                variaveis_numericas
            )
            
            if variavel_selecionada:
                col1, col2 = st.columns(2)
                
                with col1:
                    # Histograma
                    st.subheader(f"Histograma de {variavel_selecionada}")
                    hist_fig = criar_histograma(df, variavel_selecionada)
                    if hist_fig:
                        st.plotly_chart(hist_fig, use_container_width=True)
                    
                    # Estat√≠sticas robustas
                    st.subheader(f"Estat√≠sticas de {variavel_selecionada}")
                    estat = analise_estatistica_robusta(df, variavel_selecionada)
                    
                    if estat:
                        # Verifica√ß√£o de normalidade
                        normalidade = "Normal" if estat['√©_normal'] else "N√£o Normal"
                        if estat['shapiro_p_valor'] is not None:
                            normalidade_texto = f"Shapiro-Wilk p-valor: {estat['shapiro_p_valor']:.4f} - Distribui√ß√£o: {normalidade}"
                        else:
                            normalidade_texto = f"Kolmogorov-Smirnov p-valor: {estat['ks_p_valor']:.4f} - Distribui√ß√£o: {normalidade}"
                        
                        # Exibir estat√≠sticas em formato de tabela
                        estatisticas_df = pd.DataFrame({
                            'Estat√≠stica': ['M√©dia', 'Mediana', 'Desvio Padr√£o', 'M√≠nimo', 'M√°ximo', 'Assimetria', 'Curtose'],
                            'Valor': [
                                f"{estat['m√©dia']:.4f}",
                                f"{estat['mediana']:.4f}",
                                f"{estat['desvio_padr√£o']:.4f}",
                                f"{estat['min']:.4f}",
                                f"{estat['max']:.4f}",
                                f"{estat['assimetria']:.4f}",
                                f"{estat['curtose']:.4f}"
                            ]
                        })
                        
                        st.dataframe(estatisticas_df)
                        st.info(normalidade_texto)
                
                with col2:
                    # Boxplot
                    st.subheader(f"Boxplot de {variavel_selecionada}")
                    box_fig = criar_boxplot(df, variavel_selecionada)
                    if box_fig:
                        st.plotly_chart(box_fig, use_container_width=True)
                    
                    # Detec√ß√£o de outliers
                    st.subheader("Detec√ß√£o de Outliers")
                    metodo_outlier = st.radio(
                        "M√©todo para detec√ß√£o de outliers:",
                        ["IQR (Intervalo Interquartil)", "Z-Score"],
                        horizontal=True
                    )
                    
                    metodo = 'iqr' if metodo_outlier == "IQR (Intervalo Interquartil)" else 'z-score'
                    outliers, num_outliers = detectar_outliers(df, variavel_selecionada, metodo)
                    
                    st.info(f"Foram detectados {num_outliers} outliers usando o m√©todo {metodo_outlier}.")
                    
                    if num_outliers > 0 and not outliers.empty:
                        st.dataframe(outliers.head(10))
                
                # Gr√°fico de linha do tempo
                st.subheader(f"Evolu√ß√£o de {variavel_selecionada} ao longo do tempo")
                linha_fig = criar_grafico_linha_tempo(df, variavel_selecionada)
                if linha_fig:
                    st.plotly_chart(linha_fig, use_container_width=True)
            
            # An√°lise de correla√ß√£o
            st.subheader("3. An√°lise de Correla√ß√£o")
            
            with st.expander("Ver matriz de correla√ß√£o", expanded=True):
                heatmap_fig = criar_heatmap_correlacao(df)
                if heatmap_fig:
                    st.plotly_chart(heatmap_fig, use_container_width=True)
            
            # An√°lise de rela√ß√µes entre vari√°veis
            st.subheader("4. Rela√ß√µes entre Vari√°veis")
            
            col1, col2 = st.columns(2)
            
            with col1:
                var_x = st.selectbox("Selecione a vari√°vel para o eixo X:", variaveis_numericas)
            
            with col2:
                var_y = st.selectbox("Selecione a vari√°vel para o eixo Y:", 
                                    [v for v in variaveis_numericas if v != var_x])
            
            if var_x and var_y:
                scatter_fig = criar_scatter(df, var_x, var_y)
                if scatter_fig:
                    st.plotly_chart(scatter_fig, use_container_width=True)
                    
                    # Calculando e exibindo a correla√ß√£o
                    corr = df[[var_x, var_y]].corr().iloc[0, 1]
                    st.info(f"Correla√ß√£o de Pearson entre {var_x} e {var_y}: {corr:.4f}")
                    
                    # Interpreta√ß√£o da correla√ß√£o
                    if abs(corr) < 0.3:
                        st.write("Interpreta√ß√£o: Correla√ß√£o fraca.")
                    elif abs(corr) < 0.7:
                        st.write("Interpreta√ß√£o: Correla√ß√£o moderada.")
                    else:
                        st.write("Interpreta√ß√£o: Correla√ß√£o forte.")
            
            # Conclus√µes e Recomenda√ß√µes
            st.subheader("5. Conclus√µes e Recomenda√ß√µes")
            
            with st.expander("Ver conclus√µes da an√°lise", expanded=True):
                st.write("""
                ### Conclus√µes da An√°lise
                
                Com base na an√°lise explorat√≥ria dos dados de ressalto hidr√°ulico, podemos concluir:
                
                1. **Estat√≠sticas Descritivas:** Os dados apresentam padr√µes interessantes nas medidas de tend√™ncia central e dispers√£o, que podem ser √∫teis para entender o comportamento do ressalto hidr√°ulico.
                
                2. **Distribui√ß√£o dos Dados:** A an√°lise de normalidade e os gr√°ficos de histograma mostram como as vari√°veis se distribuem, o que √© essencial para escolher m√©todos estat√≠sticos apropriados.
                
                3. **Outliers:** A detec√ß√£o de outliers permite identificar valores extremos que podem representar erros de medi√ß√£o ou fen√¥menos interessantes no experimento.
                
                4. **Correla√ß√µes:** A an√°lise de correla√ß√£o revela rela√ß√µes entre as vari√°veis tempo, posi√ß√£o e velocidade, fundamentais para compreender a din√¢mica do ressalto hidr√°ulico.
                
                5. **Evolu√ß√£o Temporal:** Os gr√°ficos de linha mostram como as vari√°veis evoluem ao longo do tempo, permitindo identificar padr√µes e tend√™ncias.
                """)
                
                st.write("""
                ### Recomenda√ß√µes
                
                Para aprofundar a an√°lise e obter mais insights:
                
                1. **Modelagem Matem√°tica:** Desenvolver modelos matem√°ticos baseados nas rela√ß√µes observadas entre tempo, posi√ß√£o e velocidade.
                
                2. **Compara√ß√£o com Teoria:** Confrontar os resultados experimentais com as equa√ß√µes te√≥ricas do ressalto hidr√°ulico, como a equa√ß√£o de B√©langer.
                
                3. **An√°lise de Sensibilidade:** Investigar como pequenas varia√ß√µes nas condi√ß√µes iniciais afetam o comportamento do ressalto.
                
                4. **Experimentos Adicionais:** Realizar novos experimentos com diferentes condi√ß√µes para validar os resultados e expandir o conhecimento sobre o fen√¥meno.
                
                5. **Visualiza√ß√£o 3D:** Considerar visualiza√ß√µes tridimensionais que integrem tempo, espa√ßo e velocidade para uma compreens√£o mais completa do ressalto hidr√°ulico.
                """)
        else:
            st.error(f"N√£o foi poss√≠vel carregar os dados do arquivo: {arquivo}")
    else:
        st.error(f"Arquivo n√£o encontrado: {arquivo}")
        st.info("Por favor, verifique se o arquivo est√° na pasta raiz do projeto.")

if __name__ == "__main__":
    main()